C51 COMPILER V9.60.7.0   IR                                                                07/13/2023 13:51:28 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: D:\keil_arm\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\IR.ls
                    -t) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include "IR.h"
   2          unsigned int IR_Time;
   3          unsigned char IR_State;
   4          
   5          unsigned char IR_Data[4];
   6          unsigned char IR_PData;
   7          
   8          unsigned char IR_DataFlag;
   9          unsigned char IR_RepeatFlag;
  10          unsigned char IR_Address;
  11          unsigned char IR_Command;
  12          
  13          void IR_Init()
  14          {
  15   1          Timer0_Init_2();
  16   1          Int0_Init();
  17   1      }
  18          
  19          unsigned char IR_GetDataFlag()
  20          {
  21   1          if (IR_DataFlag)
  22   1          {
  23   2              IR_DataFlag = 0;
  24   2              return 1;
  25   2          }
  26   1          return 0;
  27   1      }
  28          
  29          unsigned char IR_GetRepeatFlag()
  30          {
  31   1          if (IR_RepeatFlag)
  32   1          {
  33   2              IR_RepeatFlag = 0;
  34   2              return 1;
  35   2          }
  36   1          return 0;
  37   1      }
  38          unsigned char IR_GetAddress()
  39          {
  40   1          return IR_Address;
  41   1      }
  42          
  43          unsigned char IR_GetCommand()
  44          {
  45   1          return IR_Command;
  46   1      }
  47          
  48          void Int0_Routine() interrupt 0
  49          {
  50   1          if (IR_State == 0)
  51   1          {
  52   2              timer0_SetCounter(0);
  53   2              Timer0_Run(1);
  54   2              IR_State = 1;
C51 COMPILER V9.60.7.0   IR                                                                07/13/2023 13:51:28 PAGE 2   

  55   2          }
  56   1          else if (IR_State == 1)
  57   1          {
  58   2              IR_Time = Timer0_GetCounter();
  59   2              timer0_SetCounter(0);
  60   2              if (IR_Time > 12442 - 500 && IR_Time < 12442 + 500)
  61   2              {
  62   3      
  63   3                  IR_State = 2;
  64   3              }
  65   2              else if (IR_Time > 10368 - 500 && IR_Time < 10368 + 500)
  66   2              {
  67   3                  IR_RepeatFlag = 1;
  68   3                  Timer0_Run(0);
  69   3                  IR_State = 0;
  70   3              }
  71   2              else
  72   2              {
  73   3                  IR_State = 1;
  74   3              }
  75   2          }
  76   1          else if (IR_State == 2)
  77   1          {
  78   2              IR_Time = Timer0_GetCounter();
  79   2              timer0_SetCounter(0);
  80   2              if (IR_Time > 1032 - 500 - 500 && IR_Time < 1032 - 500 + 500)
  81   2              {
  82   3                  IR_Data[IR_PData / 8] &= ~(0x01 << (IR_PData % 8));
  83   3                  IR_PData++;
  84   3              }
  85   2              else if (IR_Time > 2074 - 500 && IR_Time < 2074 + 500)
  86   2              {
  87   3                  IR_Data[IR_PData / 8] |= (0x01 << (IR_PData % 8));
  88   3                  IR_PData++;
  89   3              }
  90   2              else
  91   2              {
  92   3                  IR_PData = 0;
  93   3                  IR_State = 1;
  94   3              }
  95   2      
  96   2              if (IR_PData >= 32)
  97   2              {
  98   3                  IR_PData = 0;
  99   3                  if ((IR_Data[0] == ~IR_Data[1]) &&
 100   3                      (IR_Data[2] == ~IR_Data[3]))
 101   3                  {
 102   4                      IR_Address = IR_Data[0];
 103   4                      IR_Command = IR_Data[2];
 104   4                      IR_DataFlag = 1;
 105   4                  }
 106   3                  Timer0_Run(0);
 107   3                  IR_State = 0;
 108   3              }
 109   2          }
 110   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    368    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   IR                                                                07/13/2023 13:51:28 PAGE 3   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
